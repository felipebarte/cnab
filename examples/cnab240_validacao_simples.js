#!/usr/bin/env node

/**
 * Exemplo de uso da valida√ß√£o simples CNAB 240
 * Este exemplo demonstra como usar a nova funcionalidade que segue
 * exatamente o mesmo padr√£o da valida√ß√£o do CNAB 400
 */

const axios = require('axios');

const API_BASE_URL = 'http://localhost:3000/api/v1';

// Exemplo de linha CNAB 240 v√°lida (240 caracteres)
const linhaValida240 = '341000010000100001A010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';

// Exemplo de linha CNAB 240 inv√°lida (menos de 240 caracteres)
const linhaInvalida240 = '341000010000100001A01000000000000000000000000000000000000000000000';

/**
 * Fun√ß√£o para testar valida√ß√£o simples
 */
async function testarValidacaoSimples() {
  console.log('üîç Testando Valida√ß√£o Simples CNAB 240 (Padr√£o CNAB 400)\\n');

  // Teste 1: Arquivo v√°lido
  console.log('‚úÖ Teste 1: Arquivo com linhas de 240 caracteres (V√ÅLIDO)');
  const arquivoValido = [
    linhaValida240,
    linhaValida240.replace('A01', 'B01'),
    linhaValida240.replace('A01', 'C01'),
    linhaValida240.replace('A01', 'Z01')
  ].join('\\n');

  try {
    const response1 = await axios.post(`${API_BASE_URL}/cnab240/validar-simples`, {
      conteudo: arquivoValido
    });

    console.log('Resultado:', JSON.stringify(response1.data, null, 2));
    console.log('');
  } catch (error) {
    console.error('Erro:', error.response?.data || error.message);
  }

  // Teste 2: Arquivo inv√°lido
  console.log('‚ùå Teste 2: Arquivo com linhas de tamanho incorreto (INV√ÅLIDO)');
  const arquivoInvalido = [
    linhaValida240,
    linhaInvalida240, // Esta linha tem menos de 240 caracteres
    linhaValida240
  ].join('\\n');

  try {
    const response2 = await axios.post(`${API_BASE_URL}/cnab240/validar-simples`, {
      conteudo: arquivoInvalido
    });

    console.log('Resultado:', JSON.stringify(response2.data, null, 2));
    console.log('');
  } catch (error) {
    console.error('Erro:', error.response?.data || error.message);
  }

  // Teste 3: Conte√∫do vazio
  console.log('‚ùå Teste 3: Conte√∫do vazio (INV√ÅLIDO)');
  try {
    const response3 = await axios.post(`${API_BASE_URL}/cnab240/validar-simples`, {
      conteudo: ''
    });

    console.log('Resultado:', JSON.stringify(response3.data, null, 2));
    console.log('');
  } catch (error) {
    console.error('Erro:', error.response?.data || error.message);
  }

  // Teste 4: Sem campo conte√∫do
  console.log('‚ùå Teste 4: Request sem campo "conteudo" (ERRO 400)');
  try {
    const response4 = await axios.post(`${API_BASE_URL}/cnab240/validar-simples`, {});

    console.log('Resultado:', JSON.stringify(response4.data, null, 2));
  } catch (error) {
    console.log('Status:', error.response?.status);
    console.log('Resultado:', JSON.stringify(error.response?.data, null, 2));
  }
}

/**
 * Compara√ß√£o com valida√ß√£o robusta
 */
async function compararValidacoes() {
  console.log('\\nüî¨ Comparando Valida√ß√£o Simples vs Robusta\\n');

  const arquivoTeste = [
    linhaValida240,
    linhaValida240.replace('A01', 'B01')
  ].join('\\n');

  console.time('‚ö° Valida√ß√£o Simples');
  try {
    const responseSimples = await axios.post(`${API_BASE_URL}/cnab240/validar-simples`, {
      conteudo: arquivoTeste
    });
    console.timeEnd('‚ö° Valida√ß√£o Simples');
    console.log('Resultado Simples - V√°lido:', responseSimples.data.validacao.valido);
  } catch (error) {
    console.timeEnd('‚ö° Valida√ß√£o Simples');
    console.error('Erro valida√ß√£o simples:', error.response?.data || error.message);
  }

  console.time('üêå Valida√ß√£o Robusta');
  try {
    const responseRobusta = await axios.post(`${API_BASE_URL}/cnab240/validar`, {
      conteudo: arquivoTeste
    });
    console.timeEnd('üêå Valida√ß√£o Robusta');
    console.log('Resultado Robusta - V√°lido:', responseRobusta.data.validacao.valido);
    console.log('Detalhes adicionais:', responseRobusta.data.validacao.resumo ? 'Sim' : 'N√£o');
  } catch (error) {
    console.timeEnd('üêå Valida√ß√£o Robusta');
    console.error('Erro valida√ß√£o robusta:', error.response?.data || error.message);
  }
}

/**
 * Executar todos os testes
 */
async function executarTestes() {
  console.log('üöÄ Iniciando testes da Valida√ß√£o Simples CNAB 240\\n');
  console.log('üìã Caracter√≠sticas da valida√ß√£o simples:');
  console.log('   ‚Ä¢ Verifica apenas o tamanho das linhas (240 caracteres)');
  console.log('   ‚Ä¢ Compat√≠vel com o padr√£o de valida√ß√£o do CNAB 400');
  console.log('   ‚Ä¢ Performance otimizada para verifica√ß√µes r√°pidas');
  console.log('   ‚Ä¢ N√£o realiza valida√ß√µes de estrutura ou integridade\\n');

  await testarValidacaoSimples();
  await compararValidacoes();

  console.log('\\n‚úÖ Testes conclu√≠dos!');
  console.log('\\nüí° Dicas de uso:');
  console.log('   ‚Ä¢ Use valida√ß√£o simples para verifica√ß√µes r√°pidas de formato');
  console.log('   ‚Ä¢ Use valida√ß√£o robusta para valida√ß√£o completa antes do processamento');
  console.log('   ‚Ä¢ A valida√ß√£o simples √© id√™ntica ao comportamento do CNAB 400');
}

// Executar se chamado diretamente
if (require.main === module) {
  executarTestes().catch(console.error);
}

module.exports = {
  testarValidacaoSimples,
  compararValidacoes,
  executarTestes
}; 