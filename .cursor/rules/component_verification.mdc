---
description:
globs:
alwaysApply: false
---
# Regra de Verifica√ß√£o de Componentes Existentes

## üö´ REGRA CR√çTICA: NUNCA CRIAR COMPONENTES SEM VERIFICA√á√ÉO

### Verifica√ß√£o Obrigat√≥ria Antes de Criar Qualquer Componente

**SEMPRE** execute estas verifica√ß√µes antes de criar ou sugerir a cria√ß√£o de qualquer componente:

1. **Buscar componentes por nome similar:**
   ```bash
   find . -name "*.tsx" -o -name "*.jsx" | xargs grep -l "function\|const.*=.*=>" | xargs grep -i "<NOME_COMPONENTE>"
   ```

2. **Buscar por nomes de arquivo similares:**
   ```bash
   find . -type f \( -name "*<nome>*.tsx" -o -name "*<nome>*.jsx" \) | head -20
   ```

3. **Buscar exports de componentes:**
   ```bash
   grep -r "export.*<NOME_COMPONENTE>" --include="*.tsx" --include="*.jsx" .
   ```

4. **Verificar imports existentes:**
   ```bash
   grep -r "import.*<NOME_COMPONENTE>" --include="*.tsx" --include="*.jsx" .
   ```

### Processo de Verifica√ß√£o Obrigat√≥rio

#### 1. **An√°lise Sem√¢ntica**
- ‚úÖ Verifique se existe componente com funcionalidade similar
- ‚úÖ Busque por varia√ß√µes do nome (singular/plural, com/sem prefixos)
- ‚úÖ Analise componentes gen√©ricos que possam ser reutilizados

#### 2. **Busca por Padr√µes Comuns**
```bash
# Buscar componentes de UI b√°sicos
grep -r "Button\|Input\|Modal\|Card\|Form" --include="*.tsx" src/

# Buscar componentes de layout
grep -r "Header\|Footer\|Sidebar\|Layout\|Container" --include="*.tsx" src/

# Buscar componentes espec√≠ficos do dom√≠nio
grep -r -i "<termo_do_dominio>" --include="*.tsx" src/
```

#### 3. **Verifica√ß√£o de Estrutura de Pastas**
```bash
# Listar estrutura de componentes
tree src/components/ -I "node_modules"
tree src/app/ -I "node_modules" 
find . -type d -name "*component*" -o -name "*ui*"
```

### Comportamento Obrigat√≥rio

- ‚ùå **NUNCA** crie um componente sem verificar se j√° existe
- ‚ùå **NUNCA** sugira criar componente sem mostrar resultados da busca
- ‚úÖ **SEMPRE** execute as verifica√ß√µes de busca primeiro
- ‚úÖ **SEMPRE** informe ao usu√°rio sobre componentes similares encontrados
- ‚úÖ **SEMPRE** pergunte se deseja reutilizar/estender componente existente
- ‚úÖ **SEMPRE** justifique a necessidade de um novo componente se similares existirem

### Comandos de Verifica√ß√£o Recomendados

```bash
# Busca abrangente por componente
search_component() {
  local name=$1
  echo "üîç Procurando componentes similares a '$name'..."
  
  # Buscar arquivos com nome similar
  find . -type f \( -name "*${name,,}*" -o -name "*${name^}*" -o -name "*${name^^}*" \) \( -name "*.tsx" -o -name "*.jsx" \)
  
  # Buscar exports
  grep -r "export.*${name}" --include="*.tsx" --include="*.jsx" . 2>/dev/null
  
  # Buscar defini√ß√µes de componente
  grep -r "const ${name}\|function ${name}" --include="*.tsx" --include="*.jsx" . 2>/dev/null
}
```

### Exce√ß√µes Permitidas

- Criar varia√ß√£o espec√≠fica de componente existente (ex: `ButtonPrimary` quando j√° existe `Button`)
- Criar componente espec√≠fico de dom√≠nio quando gen√©rico n√£o atende
- Refatorar componente complexo em subcomponentes menores
- **SEMPRE** com justificativa clara da necessidade

### Mensagem Padr√£o ao Encontrar Componentes Similares

"‚ö†Ô∏è **COMPONENTES SIMILARES ENCONTRADOS!**
Encontrei os seguintes componentes que podem ser relacionados:

[Listar componentes encontrados]

Antes de criar um novo componente:
1. Analise se algum destes atende sua necessidade
2. Considere estender/modificar um existente
3. Se realmente precisar de um novo, explique a diferen√ßa

Deseja analisar estes componentes existentes primeiro?"

### Diretrizes para Reutiliza√ß√£o

#### **Prefira Sempre:**
1. **Reutilizar** componente existente
2. **Estender** via props/children quando poss√≠vel
3. **Compor** componentes existentes em novos layouts
4. **Refatorar** componente existente para maior flexibilidade

#### **Criar Novo Apenas Quando:**
1. Funcionalidade completamente diferente
2. Requisitos de design incompat√≠veis
3. Performance cr√≠tica exige implementa√ß√£o espec√≠fica
4. Contexto de dom√≠nio completamente distinto

### Integra√ß√£o com Ferramentas

- Use semantic search quando dispon√≠vel para busca mais inteligente
- Integre com linter/IDE para avisos autom√°ticos
- Configure pre-commit hooks para verifica√ß√£o
- Mantenha documenta√ß√£o de componentes atualizada

---

**Lembre-se:** Componentes duplicados aumentam bundle size, dificultam manuten√ß√£o e geram inconsist√™ncias de UI. Sempre prefira reutiliza√ß√£o!
