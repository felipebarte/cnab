{
  "tasks": [
    {
      "id": 1,
      "title": "Criar WebhookService para envio de dados CNAB",
      "description": "Desenvolver serviço responsável por enviar dados processados de CNAB para webhooks externos",
      "details": "Criar arquivo api/src/services/webhookService.js com métodos para enviar dados para webhook, formatação de dados CNAB, e sistema de retry para falhas",
      "testStrategy": "",
      "status": "done",
      "dependencies": [],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 2,
      "title": "Melhorar CnabService para dados estruturados",
      "description": "Expandir CnabService para extrair dados completos e estruturados do CNAB",
      "details": "Adicionar métodos no CnabService para extrair dados do cabeçalho (empresa, banco, data), informações de pagador/recebedor, e criar resumos com totais",
      "testStrategy": "",
      "status": "done",
      "dependencies": [
        1
      ],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 3,
      "title": "Instalar dependência axios para requisições HTTP",
      "description": "Adicionar biblioteca axios para fazer requisições HTTP ao webhook",
      "details": "Executar npm install axios na pasta api/ para adicionar dependência necessária para envio de dados ao webhook",
      "testStrategy": "",
      "status": "done",
      "dependencies": [],
      "priority": "medium",
      "subtasks": []
    },
    {
      "id": 4,
      "title": "Criar endpoint POST /cnab/processar-webhook no controller",
      "description": "Implementar novo endpoint que processa CNAB e envia para webhook",
      "details": "Adicionar método processarCnabEEnviarWebhook no CnabController que aceita upload de arquivo ou texto, processa com CnabService, e envia dados estruturados via WebhookService",
      "testStrategy": "",
      "status": "done",
      "dependencies": [
        1,
        2
      ],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 5,
      "title": "Adicionar rota para endpoint processar-webhook",
      "description": "Configurar rota para o novo endpoint que processa e envia webhook",
      "details": "Adicionar rota POST /processar-webhook no arquivo cnabRoutes.js apontando para o novo método do controller",
      "testStrategy": "",
      "status": "done",
      "dependencies": [
        4
      ],
      "priority": "medium",
      "subtasks": []
    },
    {
      "id": 6,
      "title": "Configurar variáveis de ambiente para webhook",
      "description": "Adicionar configurações do webhook no arquivo .env",
      "details": "Criar/atualizar arquivo .env com WEBHOOK_CNAB_URL, WEBHOOK_ENABLED, WEBHOOK_TIMEOUT, WEBHOOK_RETRY_ATTEMPTS, WEBHOOK_RETRY_DELAY",
      "testStrategy": "",
      "status": "done",
      "dependencies": [],
      "priority": "medium",
      "subtasks": []
    },
    {
      "id": 7,
      "title": "Implementar tratamento de erros e logs para webhook",
      "description": "Adicionar sistema robusto de tratamento de erros e logging",
      "details": "Implementar logs detalhados para tentativas de webhook, sistema de retry, captura de erros HTTP, e responses estruturadas para casos de sucesso/falha",
      "testStrategy": "",
      "status": "done",
      "dependencies": [
        1,
        4
      ],
      "priority": "medium",
      "subtasks": []
    },
    {
      "id": 8,
      "title": "Criar testes para funcionalidade de webhook",
      "description": "Desenvolver testes unitários e de integração para webhook",
      "details": "Criar testes para WebhookService, endpoint processar-webhook, mock do webhook externo, e cenários de falha/retry",
      "testStrategy": "",
      "status": "done",
      "dependencies": [
        1,
        4,
        7
      ],
      "priority": "low",
      "subtasks": []
    },
    {
      "id": 9,
      "title": "Atualizar documentação da API",
      "description": "Documentar o novo endpoint processar-webhook na documentação",
      "details": "Atualizar CNAB_API_DOCS.md com documentação completa do novo endpoint, exemplos de uso, estrutura de dados enviados ao webhook, e códigos de erro específicos",
      "testStrategy": "",
      "status": "done",
      "dependencies": [
        5,
        7
      ],
      "priority": "low",
      "subtasks": []
    },
    {
      "id": 10,
      "title": "Criar arquitetura base para suporte CNAB 240",
      "description": "Implementar a estrutura de pastas e arquivos base para suportar o formato CNAB 240",
      "details": "Criar estrutura de pastas para CNAB 240:\n- src/services/cnab240/ (serviços específicos)\n- src/models/cnab240/ (modelos de dados)\n- config/bancos240.js (configurações por banco)\n- tests/cnab240/ (testes específicos)\n\nO CNAB 240 tem estrutura diferente:\n- Registros de 240 caracteres vs 400\n- Estrutura em lotes com segmentos A, B, J, O\n- Header/Trailer de arquivo e lote\n- Suporte múltiplos bancos\n\nEsta é a base para todas implementações CNAB 240.",
      "testStrategy": "Verificar se estrutura de pastas foi criada corretamente e arquivos base existem",
      "status": "done",
      "dependencies": [],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 11,
      "title": "Implementar parser base para registros CNAB 240",
      "description": "Criar parser que processa registros de 240 caracteres com identificação de tipos e segmentos",
      "details": "Implementar:\n- Função para processar linhas de 240 caracteres\n- Identificação de tipos de registro (0=Header Arquivo, 1=Header Lote, 3=Detalhe, 5=Trailer Lote, 9=Trailer Arquivo)\n- Identificação de segmentos para registros de detalhe (A, B, J, O)\n- Validação básica de estrutura\n- Extração de campos comuns (banco, lote, sequencial)\n\nDiferente do CNAB 400 que usa posições fixas simples, CNAB 240 tem estrutura mais complexa com segmentos.",
      "testStrategy": "Testar com arquivos CNAB 240 de exemplo, verificar identificação correta de tipos e segmentos",
      "status": "done",
      "dependencies": [
        10
      ],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 12,
      "title": "Criar modelos de dados para estrutura CNAB 240",
      "description": "Definir interfaces e modelos para representar a estrutura hierárquica do CNAB 240",
      "details": "Criar modelos para:\n\n1. HeaderArquivo240:\n   - banco, arquivo, empresa, data/hora geração\n   - versão layout, densidade gravação\n\n2. HeaderLote240:\n   - banco, lote, tipo operação, forma lançamento\n   - versão layout lote, empresa\n\n3. Segmentos (A, B, J, O):\n   - SegmentoA: dados principais do pagamento/crédito\n   - SegmentoB: complemento do pagamento\n   - SegmentoJ: dados de títulos de cobrança\n   - SegmentoO: pagamento de tributos\n\n4. TrailerLote240:\n   - banco, lote, quantidade registros, somatórias\n\n5. TrailerArquivo240:\n   - banco, quantidade lotes/registros\n\nEstrutura final: arquivo > lotes > segmentos",
      "testStrategy": "Validar que modelos representam corretamente estrutura CNAB 240 com dados de exemplo",
      "status": "done",
      "dependencies": [
        10
      ],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 15,
      "title": "Implementar serviço principal CNAB240Service",
      "description": "Criar serviço principal que orquestra o processamento completo de arquivos CNAB 240",
      "details": "Implementar cnab240Service.js com:\n\n1. Método processar(arquivo):\n   - Lê e valida arquivo\n   - Identifica banco pelo código\n   - Processa cada linha conforme tipo\n   - Monta estrutura hierárquica (arquivo > lotes > segmentos)\n   - Retorna dados estruturados\n\n2. Validações:\n   - Integridade da estrutura\n   - Sequência de lotes e registros\n   - Somatórias de trailers\n   - Códigos específicos por banco\n\n3. Métodos auxiliares:\n   - extrairDadosCompletos()\n   - validarEstrutura()\n   - calcularSomatorias()\n   - gerarResumoProcessamento()\n\nSimilar ao cnabService.js atual mas para estrutura CNAB 240.",
      "testStrategy": "Testar com arquivos CNAB 240 completos de diferentes bancos",
      "status": "done",
      "dependencies": [
        11,
        12,
        "23",
        "24"
      ],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 16,
      "title": "Criar endpoints da API para CNAB 240",
      "description": "Implementar endpoints REST específicos para processar arquivos CNAB 240",
      "details": "Criar novos endpoints:\n\n1. POST /api/v1/cnab240/processar:\n   - Recebe arquivo CNAB 240\n   - Processa e retorna dados estruturados\n   - Suporte a diferentes bancos\n\n2. POST /api/v1/cnab240/validar:\n   - Valida estrutura sem processar\n   - Retorna erros encontrados\n\n3. GET /api/v1/cnab240/formatos/:banco:\n   - Retorna formato/layout específico do banco\n   - Documentação dos segmentos suportados\n\n4. POST /api/v1/cnab240/processar-webhook:\n   - Processa CNAB 240 e envia para webhook\n   - Similar ao CNAB 400 existente\n\nImplementar em cnab240Controller.js com validações e tratamento de erros.",
      "testStrategy": "Testar endpoints com Postman/Insomnia usando arquivos CNAB 240 de exemplo",
      "status": "done",
      "dependencies": [
        15
      ],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 18,
      "title": "Adaptar sistema de upload para suportar CNAB 240",
      "description": "Modificar middleware de upload para detectar e processar automaticamente arquivos CNAB 240",
      "details": "Modificar sistema de upload:\n\n1. Detecção automática de formato:\n   - Verificar tamanho das linhas (240 vs 400)\n   - Analisar estrutura de registros\n   - Identificar código do banco\n\n2. Roteamento inteligente:\n   - CNAB 400 → cnabService.js (atual)\n   - CNAB 240 → cnab240Service.js (novo)\n\n3. Validações de upload:\n   - Tamanho máximo de arquivo\n   - Formato de arquivo (.txt, .rem, .ret)\n   - Encoding (UTF-8, ISO-8859-1)\n\n4. Middleware unificado:\n   - uploadMiddleware.js atualizado\n   - Suporte a ambos os formatos\n   - Logs detalhados de processamento\n\nManter compatibilidade com sistema atual CNAB 400.",
      "testStrategy": "Testar upload de arquivos CNAB 240 e 400, verificar roteamento correto",
      "status": "done",
      "dependencies": [
        15,
        16
      ],
      "priority": "medium",
      "subtasks": []
    },
    {
      "id": 19,
      "title": "Criar testes automatizados para CNAB 240",
      "description": "Implementar suíte completa de testes para todas as funcionalidades CNAB 240",
      "details": "Criar testes em tests/cnab240/:\n\n1. Testes unitários:\n   - cnab240Service.test.js\n   - parsers específicos (.test.js para cada)\n   - validadores.test.js\n   - modelos.test.js\n\n2. Testes de integração:\n   - cnab240Controller.test.js\n   - endpoints API completos\n   - upload e processamento\n\n3. Fixtures de teste:\n   - Arquivos CNAB 240 válidos por banco\n   - Arquivos com erros específicos\n   - Casos edge (arquivos vazios, corrompidos)\n\n4. Testes de performance:\n   - Processamento de arquivos grandes\n   - Memória utilizada\n   - Tempo de resposta\n\nCobertura mínima de 90% para código CNAB 240.",
      "testStrategy": "Executar testes e verificar cobertura, validar com arquivos reais",
      "status": "pending",
      "dependencies": [
        15,
        16,
        "25"
      ],
      "priority": "medium",
      "subtasks": []
    },
    {
      "id": 20,
      "title": "Atualizar documentação da API para incluir CNAB 240",
      "description": "Expandir documentação atual para incluir todos os endpoints e funcionalidades CNAB 240",
      "details": "Atualizar CNAB_API_DOCS.md:\n\n1. Novos endpoints CNAB 240:\n   - Documentar cada endpoint com exemplos\n   - Parâmetros de entrada e saída\n   - Códigos de erro específicos\n\n2. Diferenças CNAB 240 vs 400:\n   - Comparativo de estruturas\n   - Quando usar cada formato\n   - Bancos suportados\n\n3. Exemplos práticos:\n   - Payloads de requisição\n   - Respostas de sucesso e erro\n   - Estrutura de dados retornados\n\n4. Guia de integração:\n   - Como detectar formato do arquivo\n   - Melhores práticas\n   - Tratamento de erros\n\n5. Especificações técnicas:\n   - Formatos suportados por banco\n   - Limitações conhecidas\n   - Performance esperada",
      "testStrategy": "Revisar documentação com desenvolvedores, testar exemplos fornecidos",
      "status": "pending",
      "dependencies": [
        16,
        18,
        "25"
      ],
      "priority": "low",
      "subtasks": []
    },
    {
      "id": 21,
      "title": "Implementar geração de arquivos CNAB 240",
      "description": "Criar funcionalidade para gerar arquivos CNAB 240 a partir de dados estruturados",
      "details": "Implementar gerador CNAB 240:\n\n1. Cnab240Generator.js:\n   - Método gerarArquivo(dados)\n   - Formatação correta de registros 240 chars\n   - Cálculo automático de sequenciais\n   - Geração de trailers com somatórias\n\n2. Templates por banco:\n   - Layout específico de cada banco\n   - Preenchimento de campos obrigatórios\n   - Validação antes da geração\n\n3. Endpoint POST /api/v1/cnab240/gerar:\n   - Recebe dados estruturados JSON\n   - Retorna arquivo CNAB 240 para download\n   - Validação dos dados de entrada\n\n4. Validações de geração:\n   - Campos obrigatórios preenchidos\n   - Formatos corretos\n   - Integridade dos dados\n\nEsta funcionalidade permite não só processar mas também gerar arquivos CNAB 240.",
      "testStrategy": "Gerar arquivos e validar com processamento, comparar com arquivos originais",
      "status": "pending",
      "dependencies": [
        15,
        16,
        "24"
      ],
      "priority": "low",
      "subtasks": []
    },
    {
      "id": 22,
      "title": "Criar sistema de cache e otimização para CNAB 240",
      "description": "Implementar cache e otimizações de performance para processamento de arquivos CNAB 240 grandes",
      "details": "Implementar otimizações:\n\n1. Cache de configurações:\n   - Configurações de bancos em memória\n   - Validadores compilados\n   - Templates de geração\n\n2. Processamento streaming:\n   - Leitura de arquivos grandes linha por linha\n   - Processamento em chunks\n   - Menor uso de memória\n\n3. Cache de resultados:\n   - Hash de arquivos processados\n   - Resultados em Redis/memória\n   - Evitar reprocessamento\n\n4. Otimizações de parsing:\n   - Pré-compilação de regex\n   - Pools de objetos reutilizáveis\n   - Validação lazy (sob demanda)\n\n5. Métricas de performance:\n   - Tempo de processamento\n   - Memória utilizada\n   - Throughput de registros",
      "testStrategy": "Testar com arquivos grandes, medir performance antes/depois das otimizações",
      "status": "pending",
      "dependencies": [
        15,
        16,
        19
      ],
      "priority": "low",
      "subtasks": []
    },
    {
      "id": 23,
      "title": "Implementar parsers específicos para cada tipo de registro CNAB 240",
      "description": "Criar parsers especializados para Header Arquivo, Header Lote, Segmentos (incluindo subtipos B) e Trailers",
      "details": "Implementar parsers para cada tipo:\n\n1. headerArquivoParser.js:\n   - Extrai campos do header do arquivo (posições 1-240)\n   - Valida código banco, tipo registro, etc.\n\n2. headerLoteParser.js:\n   - Extrai dados do header do lote\n   - Valida tipo operação, forma lançamento\n\n3. segmentoParser.js:\n   - segmentoA: pagamentos/créditos PIX\n   - segmentoJ: títulos cobrança\n   - segmentoO: tributos\n\n4. segmentoBParser.js (SUBTIPOS IDENTIFICADOS):\n   - B01: Telefone (formato +5511999999999)\n   - B02: Email (validação formato email)\n   - B03: CNPJ/CPF (14 ou 11 dígitos)\n   - B04: Chave PIX UUID (formato UUID)\n\n5. trailerParser.js:\n   - Trailer lote e arquivo\n   - Validação de somatórias\n\nCada parser deve seguir especificação FEBRABAN com posições exatas dos campos.",
      "testStrategy": "Testar cada parser individualmente com registros de exemplo de cada tipo e subtipo",
      "status": "done",
      "dependencies": [
        11,
        12
      ],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 24,
      "title": "Criar configurações específicas por banco para CNAB 240 incluindo PIX",
      "description": "Implementar configurações e validações específicas para cada banco com suporte completo a PIX e operações específicas",
      "details": "Criar config/bancos240.js com:\n\n1. Configurações por banco:\n   - Banco do Brasil (001)\n   - Itaú (341) - principal dos exemplos\n   - Santander (033)\n   - Caixa (104)\n   - Bradesco (237)\n\n2. CÓDIGOS DE OPERAÇÃO IDENTIFICADOS:\n   - 201303: Pagamento de Tributos\n   - 203003: Cobrança (Títulos)\n   - 203103: Cobrança com Complemento\n   - 204504: PIX Transferência\n   - 204704: PIX Programado\n   - 221903: Operação Especial\n   - 229103: Diversos\n\n3. CONFIGURAÇÕES PIX ESPECÍFICAS:\n   - Tipos de chave suportados (CPF, CNPJ, Email, Telefone, UUID)\n   - Limites por tipo de PIX (simples, programado, lote)\n   - Validações específicas de chave PIX\n   - Formatos de segmentos B (B01-B04)\n\n4. Para cada banco:\n   - versão layout suportada\n   - segmentos suportados\n   - validações específicas (formato conta, agência)\n   - códigos de movimento aceitos\n   - configurações PIX específicas\n\n5. Validadores específicos:\n   - formatos de conta corrente\n   - validação de dígitos verificadores\n   - códigos de serviço aceitos\n   - validação de chaves PIX por tipo",
      "testStrategy": "Validar configurações com arquivos reais de cada banco, especialmente PIX",
      "status": "done",
      "dependencies": [
        10
      ],
      "priority": "medium",
      "subtasks": []
    },
    {
      "id": 25,
      "title": "Implementar validadores avançados para CNAB 240 por código de operação",
      "description": "Criar sistema de validação específico para regras de negócio e integridade do CNAB 240 por tipo de operação",
      "details": "Implementar validadores:\n\n1. EstruturaValidator:\n   - Sequência correta de registros\n   - Obrigatoriedade de header/trailer\n   - Relação entre lotes e detalhes\n\n2. IntegridadeValidator:\n   - Somatórias de trailers\n   - Quantidade de registros\n   - Sequencial de lotes\n\n3. NegocioValidator:\n   - CPF/CNPJ válidos\n   - Contas bancárias existentes\n   - Códigos de movimento válidos\n   - Datas de vencimento\n\n4. VALIDADORES POR CÓDIGO DE OPERAÇÃO:\n\n   a) 201303 (Tributos):\n      - Códigos de tributo válidos\n      - Datas de vencimento\n      - Valores mínimos/máximos\n\n   b) 203003/203103 (Cobrança):\n      - Nosso número único\n      - Datas de vencimento futuras\n      - Valores positivos\n\n   c) 204504 (PIX Transferência):\n      - Chaves PIX válidas por tipo\n      - Valores dentro de limites\n      - Dados obrigatórios do beneficiário\n\n   d) 204704 (PIX Programado):\n      - Data/hora agendamento futura\n      - Validações de PIX + agendamento\n      - Limites de valor programado\n\n   e) 221903/229103 (Especiais):\n      - Validações específicas por contexto\n      - Campos obrigatórios por operação\n\n5. BancoValidator:\n   - Validações específicas por banco\n   - Formatos de conta aceitos\n   - Códigos de serviço suportados\n\nCada validador deve retornar erros detalhados com linha, campo e código de operação.",
      "testStrategy": "Testar com arquivos inválidos de cada tipo de operação e verificar se erros específicos são detectados",
      "status": "pending",
      "dependencies": [
        23,
        24,
        15
      ],
      "priority": "medium",
      "subtasks": []
    }
  ]
}