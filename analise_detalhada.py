#!/usr/bin/env python3

# Ler o arquivo linha por linha
with open('api/cnab-examples/rem92563.txt', 'r') as f:
    linhas = f.readlines()

print("=== AN√ÅLISE DETALHADA DOS SEGMENTOS J ===\n")

# Procurar especificamente por linhas que cont√™m segmento J
segmentos_j = []
for i, linha in enumerate(linhas, 1):
    linha_limpa = linha.strip()
    if 'J000' in linha_limpa:  # Identificador do segmento J
        segmentos_j.append((i, linha_limpa))

print(f"Encontrados {len(segmentos_j)} segmentos J:\n")

for linha_num, linha in segmentos_j:
    print(f"Linha {linha_num}: {linha}")
    print(f"Tamanho: {len(linha)} caracteres")
    
    # Analisando a estrutura espec√≠fica dos segmentos J
    # No CNAB 240, os c√≥digos de barras est√£o em posi√ß√µes espec√≠ficas
    if len(linha) >= 100:  # Verificar se tem tamanho m√≠nimo
        
        # Extrair partes espec√≠ficas que podem conter c√≥digo de barras
        # Baseado no layout CNAB 240 do Ita√∫
        
        # Poss√≠veis c√≥digos de barras em diferentes posi√ß√µes:
        codigo1 = linha[27:75] if len(linha) > 75 else ""  # Posi√ß√£o comum para c√≥digo de barras
        codigo2 = linha[75:123] if len(linha) > 123 else ""  # Outra posi√ß√£o poss√≠vel
        
        print(f"  C√≥digo poss√≠vel 1: '{codigo1}'")
        print(f"  C√≥digo poss√≠vel 2: '{codigo2}'")
        
        # Procurar por sequ√™ncias num√©ricas longas que podem ser c√≥digos de barras
        import re
        codigos_numericos = re.findall(r'\d{10,}', linha)
        print(f"  Sequ√™ncias num√©ricas longas: {codigos_numericos}")
        
    print("-" * 80)

print("\n=== EXTRA√á√ÉO ESPEC√çFICA DE C√ìDIGOS DE BARRAS ===")

# Baseado na an√°lise das linhas, vamos extrair os c√≥digos espec√≠ficos
for linha_num, linha in segmentos_j:
    if "3410001300001J000" in linha:
        print(f"\nLinha {linha_num} - Segmento J Principal:")
        
        # No layout CNAB 240 Ita√∫, vamos tentar extrair o c√≥digo de barras
        # Posi√ß√µes podem variar, mas geralmente est√£o ap√≥s identificadores espec√≠ficos
        
        # Verificar se tem padr√£o de c√≥digo de barras
        import re
        
        # Procurar por c√≥digo de barras padr√£o (sequ√™ncia de 44-48 d√≠gitos)
        padrao_codigo_barras = re.search(r'\d{44,48}', linha)
        if padrao_codigo_barras:
            codigo_encontrado = padrao_codigo_barras.group()
            print(f"  ‚úÖ C√ìDIGO DE BARRAS ENCONTRADO: {codigo_encontrado}")
            print(f"  üìç Posi√ß√£o: {padrao_codigo_barras.start()}-{padrao_codigo_barras.end()}")
        else:
            print("  ‚ùå C√≥digo de barras padr√£o n√£o encontrado")
            
        # Procurar outras sequ√™ncias relevantes
        sequencias = re.findall(r'\d{10,}', linha)
        for seq in sequencias:
            if len(seq) >= 20:  # C√≥digos de barras geralmente t√™m 44+ d√≠gitos
                print(f"  üîç Sequ√™ncia candidata: {seq} (tamanho: {len(seq)})")

print("\n=== RESUMO DOS C√ìDIGOS DE BARRAS EXTRA√çDOS ===")

codigos_extraidos = []
for linha_num, linha in segmentos_j:
    if "3410001300001J000" in linha:
        import re
        padrao_codigo_barras = re.search(r'\d{44,48}', linha)
        if padrao_codigo_barras:
            codigo = padrao_codigo_barras.group()
            codigos_extraidos.append({
                'linha': linha_num,
                'codigo': codigo,
                'tamanho': len(codigo)
            })

print(f"Total de c√≥digos de barras extra√≠dos: {len(codigos_extraidos)}")
for i, codigo_info in enumerate(codigos_extraidos, 1):
    print(f"{i}. Linha {codigo_info['linha']}: {codigo_info['codigo']} ({codigo_info['tamanho']} d√≠gitos)") 