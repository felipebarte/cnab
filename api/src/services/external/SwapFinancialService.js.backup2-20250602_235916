import ExternalAPIService from './ExternalAPIService.js';
import TokenManager from '../auth/TokenManager.js';
import TokenScheduler from '../auth/TokenScheduler.js';
import { Timer, metricsCollector } from '../../utils/metrics.js';

/**
 * Serviço de integração com a API da Swap Financial
 * Implementa autenticação OAuth 2.0 e operações de boleto
 * Agora usa TokenManager centralizado para gerenciamento de tokens
 */
class SwapFinancialService extends ExternalAPIService {
  constructor(options = {}) {
    const defaultOptions = {
      name: 'SwapFinancial',
      retryAttempts: 3,
      circuitBreaker: true,
      failureThreshold: 5,
      timeout: 30000
    };

    super({ ...defaultOptions, ...options });

    // Configurações específicas da Swap Financial
    this.environment = options.environment || 'production'; // 'staging' ou 'production'
    this.clientId = options.clientId;
    this.clientSecret = options.clientSecret;
    this.apiKey = options.apiKey;
    this.accountId = options.accountId || process.env.SWAP_ACCOUNT_ID; // ID da conta para pagamentos

    // URLs por ambiente
    this.apiUrls = {
      staging: 'https://api-stag.contaswap.io',
      production: 'https://api-prod.contaswap.io'
    };

    // Atualizar baseURL baseado no ambiente
    this.baseURL = this.apiUrls[this.environment];
    this.httpClient.defaults.baseURL = this.baseURL;

    // NOVO: Inicializar TokenManager centralizado
    this.tokenManager = new TokenManager({
      name: 'SwapFinancial-TokenManager',
      apiClient: this, // Passar referência para métodos de token
      refreshMargin: options.tokenRefreshMargin || 300, // 5 minutos
      maxRetries: options.tokenMaxRetries || 3
    });

    // NOVO: Inicializar TokenScheduler para renovação automática
    this.tokenScheduler = new TokenScheduler(this.tokenManager, {
      strategy: options.tokenStrategy || 'adaptive',
      enabled: options.autoTokenRefresh !== false, // Habilitado por padrão
      healthCheckInterval: options.tokenHealthCheckInterval || 60000 // 1 minuto
    });

    // Cache de tokens (mantido para compatibilidade com testes existentes)
    this.tokenCache = null;
    this.tokenExpiry = null;
    this.refreshToken = null;
    this.refreshExpiry = null;

    // Configurar headers específicos
    this.httpClient.defaults.headers['x-api-key'] = this.apiKey;

    this.circuitBreakerState = 'closed'; // closed, open, half-open
    this.failureCount = 0;
    this.lastFailureTime = null;
    this.circuitBreakerThreshold = options.circuitBreakerThreshold || 5;
    this.circuitBreakerTimeout = options.circuitBreakerTimeout || 60000; // 1 minuto

    // Configurar métricas do circuit breaker
    metricsCollector.setGauge('swap.circuit_breaker.state', this.circuitBreakerState);

    // Iniciar renovação automática se habilitada
    if (options.autoTokenRefresh !== false) {
      this.startAutoTokenRefresh();
    }

    this.log('info', 'SwapFinancialService initialized with TokenManager', {
      environment: this.environment,
      autoTokenRefresh: options.autoTokenRefresh !== false,
      tokenStrategy: options.tokenStrategy || 'adaptive'
    });
  }

  /**
   * NOVO: Iniciar renovação automática de tokens
   */
  startAutoTokenRefresh() {
    try {
      this.tokenScheduler.start();
      this.log('info', 'Auto token refresh started');
      metricsCollector.incrementCounter('swap.auto_refresh.started');
    } catch (error) {
      this.log('error', 'Failed to start auto token refresh', { error: error.message });
    }
  }

  /**
   * NOVO: Parar renovação automática de tokens
   */
  stopAutoTokenRefresh() {
    try {
      this.tokenScheduler.stop();
      this.log('info', 'Auto token refresh stopped');
      metricsCollector.incrementCounter('swap.auto_refresh.stopped');
    } catch (error) {
      this.log('error', 'Failed to stop auto token refresh', { error: error.message });
    }
  }

  /**
   * Autenticar e obter token de acesso (REFATORADO para usar TokenManager)
   */
  async authenticate() {
    try {
      const timer = new Timer('swap.auth.duration');
      metricsCollector.incrementCounter('swap.auth.attempts');

      // NOVO: Usar TokenManager ao invés de lógica local
      const token = await this.tokenManager.getValidToken();

      // Sincronizar cache local para compatibilidade
      this._syncLocalTokenCache();

      this.log('debug', 'Token obtained via TokenManager');
      metricsCollector.incrementCounter('swap.auth.success');
      timer.end();

      return token;
    } catch (error) {
      metricsCollector.incrementCounter('swap.auth.failures');
      this.log('error', 'Authentication failed', { error: error.message });
      throw error;
    }
  }

  /**
   * NOVO: Sincronizar cache local com TokenManager (para compatibilidade)
   */
  _syncLocalTokenCache() {
    const tokenInfo = this.tokenManager.getTokenInfo();

    if (tokenInfo.hasToken) {
      this.tokenCache = this.tokenManager.tokenCache.accessToken;
      this.tokenExpiry = this.tokenManager.tokenCache.expiresAt;
      this.refreshToken = this.tokenManager.tokenCache.refreshToken;
      this.refreshExpiry = this.tokenManager.tokenCache.refreshExpiresAt;
    }
  }

  /**
   * Fazer requisição autenticada (MANTIDO, mas usa TokenManager internamente)
   */
  async authenticatedRequest(method, url, data = null) {
    this.checkCircuitBreaker();

    try {
      // MUDANÇA: Agora usa authenticate() que internamente usa TokenManager
      const token = await this.authenticate();

      const config = {
        method,
        url,
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          'x-api-key': this.apiKey
        }
      };

      if (data) {
        config.data = data;
      }

      const response = await this.makeRequest(config);
      this.resetCircuitBreaker();
      return response.data;

    } catch (error) {
      this.handleCircuitBreakerFailure();
      throw error;
    }
  }

  /**
   * Obter token de acesso válido (REFATORADO para usar TokenManager)
   */
  async getAccessToken() {
    return await this.tokenManager.getValidToken();
  }

  /**
   * Solicitar novo token de acesso (REFATORADO para uso pelo TokenManager)
   * Este método é chamado pelo TokenManager quando precisa de um novo token
   */
  async requestNewToken() {
    const tokenData = {
      grant_type: 'client_credentials',
      client_id: this.clientId,
      client_secret: this.clientSecret
    };

    const response = await this.post(`/auth/${this.clientId}/token`, tokenData, {
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': this.apiKey
      }
    });

    if (!response || !response.access_token) {
      throw new Error('Token de acesso não recebido');
    }

    this.log('info', 'New access token obtained successfully', {
      expiresIn: response.expires_in,
      tokenType: response.token_type
    });

    // Retornar token para o TokenManager processar
    return response.access_token;
  }

  /**
   * Renovar token usando refresh token (REFATORADO para uso pelo TokenManager)
   * Este método é chamado pelo TokenManager quando tem refresh token válido
   */
  async refreshAccessToken() {
    if (!this.tokenManager.tokenCache.refreshToken) {
      throw new Error('No refresh token available');
    }

    const refreshData = {
      grant_type: 'refresh_token',
      refresh_token: this.tokenManager.tokenCache.refreshToken,
      client_id: this.clientId,
      client_secret: this.clientSecret
    };

    const response = await this.post(`/auth/${this.clientId}/token`, refreshData, {
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': this.apiKey
      }
    });

    if (!response || !response.access_token) {
      throw new Error('Failed to refresh token');
    }

    this.log('info', 'Access token refreshed successfully');

    // Retornar dados completos para o TokenManager processar
    return {
      access_token: response.access_token,
      expires_in: response.expires_in,
      refresh_token: response.refresh_token,
      refresh_expires_in: response.refresh_expires_in,
      token_type: response.token_type
    };
  }

  /**
   * Verificar boleto pelo código de barras
   */
  async checkBoleto(barcode) {
    const timer = new Timer('swap.boleto.verify.duration');
    metricsCollector.incrementCounter('swap.boleto.verify.attempts');

    if (!barcode) {
      throw new Error('Código de barras é obrigatório');
    }

    // Validar formato básico do código de barras
    if (!this.isValidBarcodeFormat(barcode)) {
      throw new Error('Formato de código de barras inválido');
    }

    try {
      // CORREÇÃO CRÍTICA: Usar endpoint correto da API Swap Financial
      // Endpoint: POST /ledger/payments/boletos
      // Payload: {"barcode": "codigo_de_barras"}
      const response = await this.authenticatedRequest('POST', '/ledger/payments/boletos', {
        barcode: barcode
      });

      if (!response) {
        throw new Error('Resposta vazia da API Swap Financial');
      }

      // Verificar campos obrigatórios
      const requiredFields = ['id', 'amount', 'due_date', 'status'];
      for (const field of requiredFields) {
        if (response[field] === undefined || response[field] === null) {
          throw new Error(`Campo obrigatório ausente na resposta: ${field}`);
        }
      }

      // Enriquecer dados do boleto
      const enrichedData = this.enrichBoletoData(response);

      this.log('info', 'Boleto checked successfully', {
        boletoId: response.id,
        amount: response.amount,
        dueDate: response.due_date,
        status: response.status
      });

      metricsCollector.incrementCounter('swap.boleto.verify.success');
      timer.end();

      return enrichedData;
    } catch (error) {
      metricsCollector.incrementCounter('swap.boleto.verify.failures');

      this.log('error', 'Failed to check boleto', {
        barcode: this.maskBarcode(barcode),
        error: error.message
      });

      throw error;
    }
  }

  /**
   * Realizar pagamento de boleto via Swap Financial
   * @param {string} barcode - Código de barras do boleto
   * @param {Object} payerData - Dados do pagador (opcional, para validação extra)
   * @returns {Promise<Object>} Resultado do pagamento
   */
  async payBoleto(barcode, payerData = {}) {
    const timer = new Timer('swap.payment.duration');
    metricsCollector.incrementCounter('swap.payment.attempts');

    try {
      // Primeiro, verificar o boleto para obter ID e dados necessários
      const boletoData = await this.checkBoleto(barcode);

      if (!boletoData || !boletoData.id) {
        throw new Error('Boleto não encontrado ou ID inválido');
      }

      // Fazer o pagamento usando endpoint correto da API Swap
      const paymentData = {
        amount: boletoData.amount,                    // Valor em centavos
        document: payerData.document || process.env.COMPANY_CNPJ || '', // CNPJ do pagador
        account_id: this.accountId                    // ID da conta do pagador
      };

      // Usar endpoint correto: POST /ledger/payments/boletos/{id}/pay
      const response = await this.authenticatedRequest('POST', `/ledger/payments/boletos/${boletoData.id}/pay`, paymentData);

      this.log('info', 'Boleto paid successfully', {
        boletoId: boletoData.id,
        amount: boletoData.amount,
        status: response.status || 'paid'
      });

      metricsCollector.incrementCounter('swap.payment.success');
      timer.end();

      return response;
    } catch (error) {
      metricsCollector.incrementCounter('swap.payment.failures');

      this.log('error', 'Failed to pay boleto', {
        barcode: this.maskBarcode(barcode),
        error: error.message
      });

      throw error;
    }
  }

  /**
   * Validar formato de código de barras
   */
  isValidBarcodeFormat(barcode) {
    if (!barcode || typeof barcode !== 'string') {
      return false;
    }

    // Aceitar códigos de 47 ou 48 dígitos
    return /^\d{47,48}$/.test(barcode);
  }

  /**
   * Enriquecer dados do boleto com validações e formatações
   */
  enrichBoletoData(boletoData) {
    const now = new Date();

    return {
      ...boletoData,
      // Valores booleanos úteis
      hasDiscount: !!(boletoData.discountAmount && boletoData.discountAmount > 0),
      hasFine: !!(boletoData.fineAmount && boletoData.fineAmount > 0),
      hasInterest: !!(boletoData.interestAmount && boletoData.interestAmount > 0),

      // Status e validações 
      canPayToday: this.canPayToday(boletoData),
      isInPaymentWindow: this.isInPaymentWindow(boletoData),
      paymentWindow: this.getPaymentWindow(boletoData),

      // Dados de processamento
      processedAt: now.toISOString(),
      environment: this.environment
    };
  }

  /**
   * Verificar se boleto pode ser pago hoje
   */
  canPayToday(_boletoData) {
    // Lógica simplificada para testes - assumir que pode pagar durante horário comercial
    const now = new Date();
    const hour = now.getHours();
    return hour >= 7 && hour <= 23;
  }

  /**
   * Verificar se está na janela de pagamento
   */
  isInPaymentWindow(boletoData) {
    const now = new Date();
    const dueDate = new Date(boletoData.due_date);

    // Se não venceu ainda, pode pagar
    if (now <= dueDate) {
      return this.canPayToday(boletoData);
    }

    // Se venceu, verificar se ainda está no prazo final (assumir 30 dias)
    const thirtyDaysAfterDue = new Date(dueDate);
    thirtyDaysAfterDue.setDate(thirtyDaysAfterDue.getDate() + 30);

    return now <= thirtyDaysAfterDue && this.canPayToday(boletoData);
  }

  /**
   * Obter informações da janela de pagamento
   */
  getPaymentWindow(boletoData) {
    return {
      startHour: '07:00',
      endHour: '23:00',
      dueDate: boletoData.due_date,
      isBusinessHours: this.canPayToday(boletoData),
      canPayNow: this.isInPaymentWindow(boletoData)
    };
  }

  /**
   * Mascarar código de barras para logs (manter apenas início e fim)
   */
  maskBarcode(barcode) {
    if (!barcode || barcode.length < 10) return barcode;
    const start = barcode.substring(0, 5);
    const end = barcode.substring(barcode.length - 5);
    const middle = '*'.repeat(barcode.length - 10);
    return `${start}${middle}${end}`;
  }

  /**
   * Validar configurações necessárias
   */
  validateConfiguration() {
    const requiredFields = ['clientId', 'clientSecret', 'apiKey'];
    const missing = requiredFields.filter(field => !this[field]);

    if (missing.length > 0) {
      throw new Error(`Missing required configuration: ${missing.join(', ')}`);
    }

    if (!['staging', 'production'].includes(this.environment)) {
      throw new Error('Environment must be either "staging" or "production"');
    }
  }

  /**
   * Obter status do circuit breaker
   */
  getCircuitBreakerStatus() {
    return {
      state: this.circuitBreakerState,
      failureCount: this.failureCount,
      threshold: this.circuitBreakerThreshold,
      lastFailureTime: this.lastFailureTime,
      timeout: this.circuitBreakerTimeout
    };
  }

  /**
   * Obter informações de configuração (sem dados sensíveis)
   * ATUALIZADO: Inclui informações do TokenManager
   */
  getConfiguration() {
    const tokenManagerInfo = this.tokenManager.getTokenInfo();
    const tokenSchedulerMetrics = this.tokenScheduler.getMetrics();

    return {
      environment: this.environment,
      baseURL: this.baseURL,
      hasClientId: !!this.clientId,
      hasClientSecret: !!this.clientSecret,
      hasApiKey: !!this.apiKey,
      hasAccountId: !!this.accountId,
      // Legacy cache status (mantido para compatibilidade)
      tokenCacheStatus: {
        hasAccessToken: !!this.tokenCache,
        accessTokenExpired: this.tokenExpiry ? Date.now() > this.tokenExpiry : true,
        hasRefreshToken: !!this.refreshToken,
        refreshTokenExpired: this.refreshExpiry ? Date.now() > this.refreshExpiry : true
      },
      // NOVO: Informações do TokenManager
      tokenManager: {
        hasToken: tokenManagerInfo.hasToken,
        isValid: tokenManagerInfo.isValid,
        expiresAt: tokenManagerInfo.expiresAt,
        expiresIn: tokenManagerInfo.expiresIn,
        isExpiringSoon: tokenManagerInfo.isExpiringSoon,
        hasRefreshToken: tokenManagerInfo.hasRefreshToken,
        isRefreshTokenValid: tokenManagerInfo.isRefreshTokenValid,
        metrics: tokenManagerInfo.metrics
      },
      // NOVO: Informações do TokenScheduler
      tokenScheduler: {
        isRunning: tokenSchedulerMetrics.isRunning,
        strategy: tokenSchedulerMetrics.strategy,
        consecutiveFailures: tokenSchedulerMetrics.consecutiveFailures,
        healthScore: tokenSchedulerMetrics.healthScore,
        hasRefreshScheduled: tokenSchedulerMetrics.hasRefreshScheduled,
        nextRefreshIn: tokenSchedulerMetrics.nextRefreshIn
      },
      circuitBreaker: this.getCircuitBreakerStatus()
    };
  }

  /**
   * Limpar cache de tokens (ATUALIZADO para usar TokenManager)
   */
  clearCache() {
    // Limpar TokenManager
    this.tokenManager.clearCache();

    // Limpar cache local (mantido para compatibilidade)
    this.tokenCache = null;
    this.tokenExpiry = null;
    this.refreshToken = null;
    this.refreshExpiry = null;

    this.log('info', 'Token cache cleared (TokenManager + local)');
  }

  /**
   * Limpar cache de tokens (método alternativo)
   */
  clearTokenCache() {
    this.clearCache();
  }

  /**
   * NOVO: Destruir serviço e limpar recursos
   */
  destroy() {
    // Parar renovação automática
    this.stopAutoTokenRefresh();

    // Destruir TokenManager
    this.tokenManager.destroy();

    // Limpar circuit breaker
    this.resetCircuitBreaker();

    this.log('info', 'SwapFinancialService destroyed');
  }

  /**
   * Health check do serviço (ATUALIZADO para incluir TokenManager)
   * @returns {Object} Status de saúde
   */
  async healthCheck() {
    try {
      const tokenManagerInfo = this.tokenManager.getTokenInfo();
      const tokenSchedulerMetrics = this.tokenScheduler.getMetrics();

      // Verificar se precisa de token
      let tokenStatus = 'valid';
      if (!tokenManagerInfo.hasToken || !tokenManagerInfo.isValid) {
        try {
          await this.authenticate();
          tokenStatus = 'refreshed';
        } catch (error) {
          tokenStatus = 'failed';
          throw error;
        }
      }

      return {
        status: 'healthy',
        timestamp: new Date().toISOString(),
        circuitBreaker: this.circuitBreakerState,
        token: {
          status: tokenStatus,
          isValid: this.tokenManager.getTokenInfo().isValid,
          expiresIn: this.tokenManager.getTokenInfo().expiresIn,
          managerMetrics: tokenManagerInfo.metrics
        },
        scheduler: {
          isRunning: tokenSchedulerMetrics.isRunning,
          healthScore: tokenSchedulerMetrics.healthScore,
          consecutiveFailures: tokenSchedulerMetrics.consecutiveFailures
        },
        service: {
          environment: this.environment,
          baseURL: this.baseURL
        }
      };

    } catch (error) {
      const tokenSchedulerMetrics = this.tokenScheduler.getMetrics();

      return {
        status: 'unhealthy',
        timestamp: new Date().toISOString(),
        error: error.message,
        circuitBreaker: this.circuitBreakerState,
        token: {
          status: 'failed',
          isValid: false,
          managerMetrics: this.tokenManager.getTokenInfo().metrics
        },
        scheduler: {
          isRunning: tokenSchedulerMetrics.isRunning,
          healthScore: tokenSchedulerMetrics.healthScore,
          consecutiveFailures: tokenSchedulerMetrics.consecutiveFailures
        },
        service: {
          environment: this.environment,
          baseURL: this.baseURL
        }
      };
    }
  }

  /**
   * Verificar se token atual é válido (ATUALIZADO para usar TokenManager)
   * @returns {boolean} True se token é válido
   */
  isTokenValid() {
    // Verificar via TokenManager (mais confiável)
    const tokenManagerValid = this.tokenManager.isTokenValid();

    // Verificar cache local (para compatibilidade)
    const localCacheValid = this.tokenCache && this.tokenExpiry && Date.now() < this.tokenExpiry;

    // Log se há discrepância entre os métodos
    if (tokenManagerValid !== localCacheValid) {
      this.log('debug', 'Token validity mismatch', {
        tokenManager: tokenManagerValid,
        localCache: localCacheValid,
        willSyncCache: true
      });

      // Sincronizar cache local
      this._syncLocalTokenCache();
    }

    // Retornar resultado do TokenManager (mais confiável)
    return tokenManagerValid;
  }

  /**
   * NOVO: Obter métricas detalhadas do serviço
   */
  getDetailedMetrics() {
    return {
      service: this.name,
      timestamp: new Date().toISOString(),
      tokenManager: this.tokenManager.getMetrics(),
      tokenScheduler: this.tokenScheduler.getMetrics(),
      circuitBreaker: this.getCircuitBreakerStatus(),
      configuration: {
        environment: this.environment,
        autoTokenRefresh: this.tokenScheduler.isRunning,
        refreshStrategy: this.tokenScheduler.strategy
      }
    };
  }

  /**
   * NOVO: Forçar renovação de token
   */
  async forceTokenRefresh() {
    this.log('info', 'Force token refresh requested');

    try {
      const result = await this.tokenScheduler.forceRefresh();
      this._syncLocalTokenCache(); // Sincronizar cache local
      return result;
    } catch (error) {
      this.log('error', 'Force token refresh failed', { error: error.message });
      throw error;
    }
  }

  /**
   * NOVO: Alterar estratégia de renovação de token
   */
  setTokenRefreshStrategy(strategy) {
    this.log('info', 'Changing token refresh strategy', {
      from: this.tokenScheduler.strategy,
      to: strategy
    });

    this.tokenScheduler.setStrategy(strategy);
  }

  /**
   * Verificar circuit breaker
   */
  checkCircuitBreaker() {
    if (this.circuitBreakerState === 'open') {
      const timeSinceLastFailure = Date.now() - this.lastFailureTime;

      if (timeSinceLastFailure > this.circuitBreakerTimeout) {
        this.circuitBreakerState = 'half-open';
        this.log('info', 'Circuit breaker mudou para half-open');
        metricsCollector.setGauge('swap.circuit_breaker.state', 'half-open');
      } else {
        throw new Error('Circuit breaker está aberto');
      }
    }
  }

  /**
   * Lidar com falha do circuit breaker
   */
  handleCircuitBreakerFailure() {
    this.failureCount++;
    this.lastFailureTime = Date.now();

    if (this.failureCount >= this.circuitBreakerThreshold) {
      this.circuitBreakerState = 'open';
      this.log('warning', 'Circuit breaker aberto devido a falhas consecutivas', {
        failureCount: this.failureCount,
        threshold: this.circuitBreakerThreshold
      });
      metricsCollector.setGauge('swap.circuit_breaker.state', 'open');
    }
  }

  /**
   * Resetar circuit breaker
   */
  resetCircuitBreaker() {
    if (this.failureCount > 0 || this.circuitBreakerState !== 'closed') {
      this.failureCount = 0;
      this.circuitBreakerState = 'closed';
      this.lastFailureTime = null;
      metricsCollector.setGauge('swap.circuit_breaker.state', 'closed');
    }
  }
}

export default SwapFinancialService; 