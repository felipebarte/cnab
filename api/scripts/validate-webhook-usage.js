#!/usr/bin/env node

/**
 * Script de Valida√ß√£o: Uso Correto do WebhookService
 * 
 * Este script verifica se todos os controllers est√£o usando o m√©todo correto
 * do WebhookService (enviarParaWebhook) e n√£o o m√©todo incorreto (enviarDados).
 * 
 * Uso: node scripts/validate-webhook-usage.js
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configura√ß√µes
const CONFIG = {
  controllersDir: path.join(__dirname, '../src/controllers'),
  metodoCorreto: 'enviarParaWebhook',
  metodosIncorretos: ['enviarDados'],
  serviceName: 'WebhookService',
  extensions: ['.js']
};

// Cores para output no terminal
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  bold: '\x1b[1m'
};

/**
 * Busca arquivos recursivamente em um diret√≥rio
 */
function findFiles(dir, extensions) {
  const files = [];

  function searchDir(currentDir) {
    const items = fs.readdirSync(currentDir);

    for (const item of items) {
      const fullPath = path.join(currentDir, item);
      const stat = fs.statSync(fullPath);

      if (stat.isDirectory()) {
        searchDir(fullPath);
      } else if (extensions.some(ext => item.endsWith(ext))) {
        files.push(fullPath);
      }
    }
  }

  searchDir(dir);
  return files;
}

/**
 * Analisa um arquivo em busca de uso incorreto do WebhookService
 */
function analyzeFile(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  const lines = content.split('\n');
  const issues = [];
  const validUsages = [];

  lines.forEach((line, index) => {
    const lineNumber = index + 1;
    const trimmedLine = line.trim();

    // Verifica uso do WebhookService
    if (trimmedLine.includes(CONFIG.serviceName)) {
      // Verifica m√©todos incorretos
      CONFIG.metodosIncorretos.forEach(metodoIncorreto => {
        if (trimmedLine.includes(`${CONFIG.serviceName}.${metodoIncorreto}`)) {
          issues.push({
            type: 'incorrect_method',
            line: lineNumber,
            content: trimmedLine,
            method: metodoIncorreto,
            suggestion: `Use ${CONFIG.serviceName}.${CONFIG.metodoCorreto}() em vez de ${CONFIG.serviceName}.${metodoIncorreto}()`
          });
        }
      });

      // Verifica uso correto
      if (trimmedLine.includes(`${CONFIG.serviceName}.${CONFIG.metodoCorreto}`)) {
        validUsages.push({
          line: lineNumber,
          content: trimmedLine
        });
      }
    }
  });

  return { issues, validUsages };
}

/**
 * Valida a ordem dos par√¢metros em chamadas do WebhookService
 */
function validateParameterOrder(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  const lines = content.split('\n');
  const warnings = [];

  lines.forEach((line, index) => {
    const lineNumber = index + 1;
    const trimmedLine = line.trim();

    // Procura por chamadas do m√©todo correto
    if (trimmedLine.includes(`${CONFIG.serviceName}.${CONFIG.metodoCorreto}`)) {
      // Verifica se parece que os par√¢metros est√£o na ordem errada
      // (heur√≠stica: se o primeiro par√¢metro parece ser uma URL)
      const match = trimmedLine.match(/enviarParaWebhook\s*\(\s*([^,]+)/);
      if (match) {
        const firstParam = match[1].trim();
        if (firstParam.includes('http') || firstParam.includes('webhook') || firstParam.includes('Url')) {
          warnings.push({
            type: 'parameter_order',
            line: lineNumber,
            content: trimmedLine,
            suggestion: 'Verifique se os par√¢metros est√£o na ordem correta: enviarParaWebhook(dadosCnab, webhookUrl)'
          });
        }
      }
    }
  });

  return warnings;
}

/**
 * Fun√ß√£o principal de valida√ß√£o
 */
function validateWebhookUsage() {
  console.log(`${colors.bold}${colors.blue}üîç Validando uso do WebhookService...${colors.reset}\n`);

  // Verifica se o diret√≥rio de controllers existe
  if (!fs.existsSync(CONFIG.controllersDir)) {
    console.log(`${colors.red}‚ùå Diret√≥rio de controllers n√£o encontrado: ${CONFIG.controllersDir}${colors.reset}`);
    process.exit(1);
  }

  // Busca todos os arquivos de controller
  const controllerFiles = findFiles(CONFIG.controllersDir, CONFIG.extensions);

  if (controllerFiles.length === 0) {
    console.log(`${colors.yellow}‚ö†Ô∏è  Nenhum arquivo de controller encontrado${colors.reset}`);
    return;
  }

  console.log(`üìÅ Analisando ${controllerFiles.length} arquivo(s) de controller...\n`);

  let totalIssues = 0;
  let totalWarnings = 0;
  let totalValidUsages = 0;

  // Analisa cada arquivo
  controllerFiles.forEach(filePath => {
    const relativePath = path.relative(process.cwd(), filePath);
    const { issues, validUsages } = analyzeFile(filePath);
    const warnings = validateParameterOrder(filePath);

    if (issues.length > 0 || warnings.length > 0 || validUsages.length > 0) {
      console.log(`üìÑ ${colors.bold}${relativePath}${colors.reset}`);

      // Mostra usos corretos
      if (validUsages.length > 0) {
        console.log(`  ${colors.green}‚úÖ ${validUsages.length} uso(s) correto(s) encontrado(s)${colors.reset}`);
        totalValidUsages += validUsages.length;
      }

      // Mostra problemas cr√≠ticos
      if (issues.length > 0) {
        issues.forEach(issue => {
          console.log(`  ${colors.red}‚ùå Linha ${issue.line}: ${issue.suggestion}${colors.reset}`);
          console.log(`     ${colors.red}C√≥digo: ${issue.content}${colors.reset}`);
        });
        totalIssues += issues.length;
      }

      // Mostra avisos
      if (warnings.length > 0) {
        warnings.forEach(warning => {
          console.log(`  ${colors.yellow}‚ö†Ô∏è  Linha ${warning.line}: ${warning.suggestion}${colors.reset}`);
          console.log(`     ${colors.yellow}C√≥digo: ${warning.content}${colors.reset}`);
        });
        totalWarnings += warnings.length;
      }

      console.log('');
    }
  });

  // Resumo final
  console.log(`${colors.bold}üìä Resumo da Valida√ß√£o:${colors.reset}`);
  console.log(`  ${colors.green}‚úÖ Usos corretos: ${totalValidUsages}${colors.reset}`);
  console.log(`  ${colors.yellow}‚ö†Ô∏è  Avisos: ${totalWarnings}${colors.reset}`);
  console.log(`  ${colors.red}‚ùå Problemas cr√≠ticos: ${totalIssues}${colors.reset}`);

  if (totalIssues > 0) {
    console.log(`\n${colors.red}${colors.bold}üí• FALHA: Encontrados ${totalIssues} problema(s) cr√≠tico(s)!${colors.reset}`);
    console.log(`${colors.red}Por favor, corrija os problemas antes de continuar.${colors.reset}`);
    process.exit(1);
  } else if (totalWarnings > 0) {
    console.log(`\n${colors.yellow}${colors.bold}‚ö†Ô∏è  ATEN√á√ÉO: Encontrados ${totalWarnings} aviso(s).${colors.reset}`);
    console.log(`${colors.yellow}Recomenda-se revisar os avisos.${colors.reset}`);
  } else {
    console.log(`\n${colors.green}${colors.bold}üéâ SUCESSO: Todos os usos do WebhookService est√£o corretos!${colors.reset}`);
  }
}

/**
 * Mostra informa√ß√µes de ajuda
 */
function showHelp() {
  console.log(`${colors.bold}üîó Validador de Uso do WebhookService${colors.reset}

${colors.bold}Uso:${colors.reset}
  node scripts/validate-webhook-usage.js

${colors.bold}Descri√ß√£o:${colors.reset}
  Este script verifica se todos os controllers est√£o usando o m√©todo correto
  do WebhookService e detecta poss√≠veis problemas de implementa√ß√£o.

${colors.bold}Verifica√ß√µes realizadas:${colors.reset}
  ‚úÖ Uso do m√©todo correto: ${CONFIG.metodoCorreto}()
  ‚ùå Uso de m√©todos incorretos: ${CONFIG.metodosIncorretos.join(', ')}
  ‚ö†Ô∏è  Ordem dos par√¢metros suspeita

${colors.bold}C√≥digos de sa√≠da:${colors.reset}
  0 - Sucesso (sem problemas cr√≠ticos)
  1 - Falha (problemas cr√≠ticos encontrados)

${colors.bold}Exemplo de uso correto:${colors.reset}
  ${colors.green}await WebhookService.enviarParaWebhook(dadosCnab, webhookUrl);${colors.reset}

${colors.bold}Exemplo de uso incorreto:${colors.reset}
  ${colors.red}await WebhookService.enviarDados(webhookUrl, dadosCnab);${colors.reset}
`);
}

// Execu√ß√£o principal
if (process.argv.includes('--help') || process.argv.includes('-h')) {
  showHelp();
} else {
  validateWebhookUsage();
} 